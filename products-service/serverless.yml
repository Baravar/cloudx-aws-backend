service: cloudx-products-service
frameworkVersion: '3'

# Add the serverless-webpack plugin
plugins:
  - serverless-lift
  - serverless-webpack

# used by serverless-lift to setup SQS using Cloudformation
constructs:
  catalogItemsQueue:
    type: queue
    batchSize: 5 
    worker:
      handler: handler.catalogBatchProcess

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  httpApi:
    cors: true
  environment:
    PRODUCTS_DB_NAME: ${self:custom.PRODUCTS_DB_NAME.${self:custom.stage}}
    STOCKS_DB_NAME: ${self:custom.STOCKS_DB_NAME.${self:custom.stage}}
    QUEUE_URL: ${construct:catalogItemsQueue.queueUrl}
    SNS_ARN: 
      Ref: SNSTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:PutItem'
          Resource: 'arn:aws:dynamodb:us-east-1:261414472581:table/${self:provider.environment.PRODUCTS_DB_NAME}'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action: 
            - 'dynamodb:Scan'
            - 'dynamodb:Query'
            - 'dynamodb:PutItem'
          Resource: 'arn:aws:dynamodb:us-east-1:261414472581:table/${self:provider.environment.STOCKS_DB_NAME}'
        - Effect: Allow
          Action: 'sns:*'
          Resource: 
            Ref: SNSTopic

custom:
  stage: ${opt:stage, self:provider.stage}
  PRODUCTS_DB_NAME:
    dev: ${ssm(us-east-1):/dev/PRODUCTS_DB_NAME}
  STOCKS_DB_NAME:
    dev: ${ssm(us-east-1):/dev/STOCKS_DB_NAME}

functions:
  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          method: POST
          path: /products
  getProductsById:
    handler: handler.getProductsById
    events:
      - httpApi:
          method: GET
          path: /products/{productId}
  getProducts:
    handler: handler.getProductsList
    events:
      - httpApi:
          method: GET
          path: /products

resources:
  Resources:
    SNSTopic:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: 'Captures event of created products'
          TopicName: createProductTopic
    SNSSubscription:
        Type: AWS::SNS::Subscription
        Properties:
          Endpoint: artsiom_baravik@epam.com
          Protocol: email
          FilterPolicyScope: MessageAttributes
          FilterPolicy:
            notify: 
              - 'true' 
          TopicArn: 
            Ref: SNSTopic
